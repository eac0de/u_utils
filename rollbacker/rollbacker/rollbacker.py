"""
Модуль с миксином для классов, где в процессе работы нужна возможность откатить изменения.

Этот миксин предоставляет функциональность для управления откатами асинхронных операций. 
Он позволяет добавлять функции, которые могут быть вызваны для отмены изменений.

Классы:
    - Rollbacker: Миксин для реализации возможности отката изменений.

Примечания:
    - Все функции, добавленные в список откатов, должны быть асинхронными.
"""

from collections.abc import Callable, Coroutine
from typing import Any

from pydantic import BaseModel, Field


class RollbackCoroutine(BaseModel):
    coro: Callable[..., Coroutine[Any, Any, Any]] = Field(
        title="Корутина которая выполниться при роллбеке",
    )
    args: tuple[Any, ...] = Field(
        default=(),
        title="Аргументы",
    )
    kwargs: dict[str, Any] = Field(
        default_factory=dict,
        title="Именованные аргументы",
    )


class Rollbacker:
    """
    Миксин, реализующий возможность отката изменений.

    Этот миксин позволяет добавлять асинхронные функции отката, которые могут быть вызваны в
    случае необходимости для отмены изменений. Это может быть полезно в сценариях,
    где важна возможность возврата к предыдущему состоянию после выполнения ряда операций.

    Attributes:
        __rollbacks (list[Awaitable]): Список функций, которые будут выполнены при откате.
    """

    def __init__(self, *args, **kwargs):
        """
        Инициализация миксина, где происходит создание списка await-функций,
        которые должны выполниться при вызове rollback().

        Args:
            *args: Аргументы для инициализации родительского класса.
            **kwargs: Ключевые аргументы для инициализации родительского класса.
        """
        super().__init__(*args, **kwargs)  # Вызов инициализации других классов
        self.__rollbacks: list[RollbackCoroutine] = (
            []
        )  # Индивидуальный список для каждого экземпляра

    def add_rollback(self, coro: Callable[..., Any], *args, **kwargs):
        """
        Добавление await-функций в список для возможности отката.

        Args:
            func (Awaitable): Асинхронная функция, которую нужно добавить в список откатов.
        """
        self.__rollbacks.append(RollbackCoroutine(coro=coro, args=args, kwargs=kwargs))

    async def rollback(self):
        """
        Функция для запуска await-функций из списка.

        Этот метод последовательно выполняет все функции отката,
        добавленные в список. Если во время выполнения одной из функций
        возникает ошибка, она игнорируется, и выполнение продолжается с
        последующими функциями.

        Notes:
            - После завершения выполнения всех функций список откатов очищается.
        """
        for r in self.__rollbacks:
            try:
                await r.coro(*r.args, **r.kwargs)
            except:
                pass
        self.__rollbacks.clear()
